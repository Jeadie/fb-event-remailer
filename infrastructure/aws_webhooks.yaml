AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS infrastructure to handle Facebook event webhooks via HTTPS api gateway and AWS Lambdas. Based on: https://github.com/aws-quickstart/quickstart-git2s3"
Parameters:
  FBAppSecret:
    Description: 'Facebook app secret.'
    Type: String
    Default: ''
    NoEcho: 'true'
  FBAppID:
    Description: 'Facebook App ID.'
    Type: String
    Default: ''
    NoEcho: 'true'
  CustomDomainName:
    Description: Use a custom domain name for the webhook endpoint, if left blank
      API Gateway will create a domain name for you
    Type: String
    Default: ''
  VPCId:
    Description: Id of the VPC the DL Zip lambda should run in
    Type: String
    Default: ''
  VPCCidrRange:
    Description: CIDR range of the VPC
    Type: String
    Default: ''
  SubnetIds:
    Description: SubnetIds the DL Zip lambda should run in
    Type: CommaDelimitedList
    Default: ''
  ScmHostnameOverride:
    Description: Hostname to override the incoming json request with
    Type: String
    Default: ''

Conditions:
  UseAllowedIps: !Not
    - !Equals
      - !Ref 'AllowedIps'
      - ''
  UseCustomDomain: !Not
    - !Equals
      - !Ref 'CustomDomainName'
      - ''
  ShouldRunInVPC: !Not
    - !Equals
      - !Ref 'VPCId'
      - ''
Resources:

  # Store Zip 
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'AWS::NoValue'
      Tags: []

# Copy lambdas source code to  S3.
  CopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/CreateFBAppSecretKey/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
        - functions/packages/GitPullS3/lambda.zip

  CopyZipsRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - '*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:

# KMS Key 
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Store FB secret in AWS KMS.
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - :root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - :root
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - :root
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true

# Create Facebook Secret Key in KMS
  CreateFBAppSecretKeyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: git2cp-FBAppSecretKeygen
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'KeyBucket'
                      - /crypto.zip
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'KeyBucket'
                      - /enc_key
              - Effect: Allow
                Action:
                  - kms:Encrypt
                Resource:
                  - !GetAtt 'KMSKey.Arn'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  
  CreateFBAppSecretKeyLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'CreateFBAppSecretKeyRole.Arn'
      Runtime: python3.8
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/CreateFBAppSecretKey/lambda.zip'
  
  CreateFBAppSecretKey:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'CreateFBAppSecretKeyLambda.Arn'
      Region: !Ref 'AWS::Region'
      KMSKey: !Ref 'KMSKey'
  
# Delete contents of S3 buckets used for Lambda uploads
  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: git2cp-deletebucketcontents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'KeyBucket'
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                      - /*
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'KeyBucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'DeleteBucketContentsRole.Arn'
      Runtime: python3.8
      Timeout: 300
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'

  DeleteBucketContents:
    Type: AWS::CloudFormation::CustomResource
    Version: '1.0'
    DependsOn:
      - OutputBucket
    Properties:
      ServiceToken: !GetAtt 'DeleteBucketContentsLambda.Arn'
      OutputBucket: !Ref 'OutputBucket'

# Handles incoming Webhooks
  FBWebHookEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: git2cp-gitpull
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !GetAtt 'KMSKey.Arn'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'OutputBucket'
                      - /*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'KeyBucket'
                      - /enc_key
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*

  FBWebHookEventLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'FBWebHookEventRole.Arn'
      Runtime: python3.8
      Timeout: 900
      Environment:
        Variables:
          ExcludeGit: !Ref ExcludeGit

      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GitPullS3/lambda.zip'

# Handle API Gateway
  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: git2cp-webhook
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt 'GitPullLambda.Arn'
  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: '2.0'
        info:
          version: '2016-07-26T07:34:38Z'
          title: !Join
            - - event-remailer-
              - !Ref 'AWS::StackName'
        schemes:
          - https
        paths:
          /gitpull:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt 'WebHookRole.Arn'
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.X-Amz-Invocation-Type: '''Event'''
                passthroughBehavior: when_no_templates
                httpMethod: POST
                uri: !Join
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - :lambda:path//2015-03-31/functions/
                    - !GetAtt 'GitPullLambda.Arn'
                    - /invocations
                requestTemplates:
                  application/json: !Join
                    - ''
                    - - "#set($allParams = $input.params())\n"
                      - "{\n"
                      - "\"body-json\" : $input.json('$'),\n"
                      - "\"params\" : {\n"
                      - "#foreach($type in $allParams.keySet())\n"
                      - "    #set($params = $allParams.get($type))\n"
                      - "\"$type\" : {\n"
                      - "    #foreach($paramName in $params.keySet())\n"
                      - "    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                        \n"
                      - "        #if($foreach.hasNext),#end\n"
                      - "    #end\n"
                      - "}\n"
                      - "    #if($foreach.hasNext),#end\n"
                      - "#end\n"
                      - "},\n"
                      - "\"stage-variables\" : {\n"
                      - "#foreach($key in $stageVariables.keySet())\n"
                      - "\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                        \n"
                      - "    #if($foreach.hasNext),#end\n"
                      - "#end\n"
                      - "},\n"
                      - "\"context\" : {\n"
                      - "    \"account-id\" : \"$context.identity.accountId\",\n"
                      - "    \"api-id\" : \"$context.apiId\",\n"
                      - "    \"api-key\" : \"$context.identity.apiKey\",\n"
                      - "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\"\
                        ,\n"
                      - "    \"caller\" : \"$context.identity.caller\",\n"
                      - "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                        ,\n"
                      - "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                        ,\n"
                      - "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                        ,\n"
                      - "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                        ,\n"
                      - "    \"http-method\" : \"$context.httpMethod\",\n"
                      - "    \"stage\" : \"$context.stage\",\n"
                      - "    \"source-ip\" : \"$context.identity.sourceIp\",\n"
                      - "    \"user\" : \"$context.identity.user\",\n"
                      - "    \"user-agent\" : \"$context.identity.userAgent\",\n"
                      - "    \"user-arn\" : \"$context.identity.userArn\",\n"
                      - "    \"request-id\" : \"$context.requestId\",\n"
                      - "    \"resource-id\" : \"$context.resourceId\",\n"
                      - "    \"resource-path\" : \"$context.resourcePath\",\n"
                      - "    \"allowed-ips\" : \"$stageVariables.allowedips\",\n"
                      - "    \"api-secrets\" : \"$stageVariables.FBAppSecrets\",\n"
                      - '    "key-bucket" : "'
                      - !Ref 'KeyBucket'
                      - "\",\n"
                      - "    \"output-bucket\" : \"$stageVariables.outputbucket\"\
                        ,\n"
                      - '    "public-key" : "'
                      - !Ref 'CreateFBAppSecretKey'
                      - "\",\n"
                      - "    \"raw-body\" : \"$util.escapeJavaScript($input.body).replace(\"\
                        \\'\",\"'\")\"\n"
                      - "    }\n"
                      - '}'
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
        definitions:
          Empty:
            type: object

  WebHookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'WebHookApi'
      StageName: DummyStage

  WebHookApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref 'WebHookApiDeployment'
      RestApiId: !Ref 'WebHookApi'
      StageName: Prod
      Variables:
        outputbucket: !Ref 'OutputBucket'
        allowedips: !If
          - UseAllowedIps
          - !Ref 'AllowedIps'
          - !Ref 'AWS::NoValue'
        FBAppSecrets: !If
          - UseFBAppSecret
          - !Ref 'FBAppSecret'
          - !Ref 'AWS::NoValue'

  CustomDomainCertificate:
    Condition: UseCustomDomain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref 'CustomDomainName'

  WebHookApiCustomDomainName:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref 'CustomDomainCertificate'
      DomainName: !Ref 'CustomDomainName'

  WebHookApiCustomDomainNameMapping:
    Condition: UseCustomDomain
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref 'CustomDomainName'
      RestApiId: !Ref 'WebHookApi'

Outputs:
  CustomDomainNameCNAME:
    Value: !If
      - UseCustomDomain
      - !GetAtt 'WebHookApiCustomDomainName.DistributionDomainName'
      - ''

  PublicFBAppSecretKey:
    Value: !Ref 'CreateFBAppSecretKey'

  GitPullWebHookApi:
    Value: !Join
      - ''
      - - ' https://'
        - !If
          - UseCustomDomain
          - !Ref 'CustomDomainName'
          - !Join
            - ''
            - - !Ref 'WebHookApi'
              - .execute-api.
              - !Ref 'AWS::Region'
              - .amazonaws.com
        - /
        - !Ref 'WebHookApiProdStage'
        - /gitpull

